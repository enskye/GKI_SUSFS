# .github/workflows/build-kernel.yml

name: Build GKI Kernel with KernelSU & susfs4ksu (Bazel + Signing)

on:
  workflow_dispatch: # Allows you to run this workflow manually

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    name: Build GKI Kernel with Bazel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Workflow Repo
        uses: actions/checkout@v4

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Install Dependencies & Setup Repo Tool
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses-dev libsdl2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev lz4 openssl
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "$HOME/.bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global init.defaultBranch main

      - name: Create workspace and get build info
        run: |
          mkdir -p workarea
          cd workarea
          
          # Generate build timestamp
          BUILD_DATE=$(date +"%Y%m%d")
          BUILD_TIME=$(date +"%H%M")
          BUILD_DATE_FORMATTED=$(date +"%Y-%m-%d")
          BUILD_TIME_FORMATTED=$(date +"%H:%M")
          KERNEL_NAME="kyernel-lts-${BUILD_DATE}-${BUILD_TIME}"
          
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_ENV
          echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
          echo "BUILD_DATE_FORMATTED=${BUILD_DATE_FORMATTED}" >> $GITHUB_ENV
          echo "BUILD_TIME_FORMATTED=${BUILD_TIME_FORMATTED}" >> $GITHUB_ENV
          echo "KERNEL_NAME=${KERNEL_NAME}" >> $GITHUB_ENV
          
          echo "Building: $KERNEL_NAME"

      - name: Generate signing keys
        run: |
          cd workarea
          
          echo "Generating RSA key pair for kernel module signing..."
          openssl genrsa -out signing_key.priv 2048
          openssl req -new -x509 -key signing_key.priv -out signing_key.x509 -days 365 \
            -subj "/C=US/ST=CA/L=GitHub/O=Actions/CN=Kernel Builder"
          
          # Convert to DER format for kernel
          openssl x509 -in signing_key.x509 -outform DER -out signing_key.x509.der
          
          echo "✅ Signing keys generated"

      - name: Setup GKI Monthly sources first
        run: |
          cd workarea
          mkdir -p gki-kernel gki-lts-kernel
          cd gki-kernel
          
          echo "Setting up GKI Monthly sources first..."
          echo "Finding latest stable android14-6.1 tag..."
          LATEST_TAG=$(git ls-remote --tags https://android.googlesource.com/kernel/manifest | grep "refs/tags/android14-6.1-" | grep -v "lts" | grep -v "\^{}" | sort -V | tail -1 | cut -d'/' -f3)
          
          if [[ -n "$LATEST_TAG" ]]; then
            echo "Using latest stable tag: $LATEST_TAG"
            repo init -u https://android.googlesource.com/kernel/manifest -b $LATEST_TAG --depth=2
          else
            echo "No stable tag found, using common-android14-6.1 branch"
            repo init -u https://android.googlesource.com/kernel/manifest -b common-android14-6.1 --depth=2
          fi
          
          echo "Starting repo sync..."
          repo sync -c --no-tags -j$(nproc)
          echo "GKI Monthly setup completed"

      - name: Setup LTS kernel sources
        run: |
          cd workarea
          
          # Create LTS kernel directory
          cd gki-lts-kernel
          git clone --depth 2 --no-tags https://android.googlesource.com/kernel/common.git -b android14-6.1-lts
          
          # Copy necessary components from GKI Monthly
          cd ..
          for i in build tools prebuilts external .repo kernel common-modules; do 
            rsync -a --del gki-kernel/$i/ gki-lts-kernel/$i/ 2>/dev/null || true
          done
          
          cd gki-lts-kernel
          ln -sf build/kernel/kleaf/bazel.WORKSPACE WORKSPACE
          
          echo "✅ LTS kernel sources ready"
          echo "KERNEL_REPO=$PWD" >> $GITHUB_ENV

      - name: Clone SUSFS repository
        run: |
          cd workarea
          
          echo "Cloning SUSFS repository for LTS..."
          git clone --depth 2 --no-tags https://gitlab.com/pershoot/susfs4ksu.git -b gki-android14-6.1-lts-dev

      - name: Copy SUSFS module and patches
        run: |
          cd workarea/gki-lts-kernel
          
          echo "Copying SUSFS files..."
          cp -p ../susfs4ksu/kernel_patches/fs/* common/fs/
          cp -p ../susfs4ksu/kernel_patches/include/linux/* common/include/linux/
          
          # Try LTS-specific patch first, fallback to regular patch
          cp -p ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1-lts.patch common/ 2>/dev/null || \
          cp -p ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch common/
          
          cp -p ../susfs4ksu/kernel_patches/60_scope-minimized_manual_hooks.patch common/

      - name: Apply SUSFS patches
        run: |
          cd $KERNEL_REPO/common
          
          echo "Applying SUSFS patches..."
          # Apply LTS patch if it exists, otherwise use regular patch
          if [[ -f "50_add_susfs_in_gki-android14-6.1-lts.patch" ]]; then
            patch -p1 -ui 50_add_susfs_in_gki-android14-6.1-lts.patch
          else
            patch -p1 -ui 50_add_susfs_in_gki-android14-6.1.patch
          fi
          
          patch -p1 -ui 60_scope-minimized_manual_hooks.patch

      - name: Setup KernelSU-Next
        run: |
          cd $KERNEL_REPO
          
          echo "Setting up KernelSU-Next..."
          curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/refs/heads/next-susfs/kernel/setup.sh" | bash -s next-susfs

      - name: Configure signing and kernel parameters
        run: |
          cd $KERNEL_REPO
          
          echo "Configuring kernel signing..."
          # Copy signing keys to kernel build directory
          cp ../signing_key.priv common/
          cp ../signing_key.x509 common/
          
          # Configure build config for signing
          BUILD_CONFIG_PATH="common/build.config.gki.aarch64"
          echo "" >> $BUILD_CONFIG_PATH
          echo "# Kernel module signing configuration" >> $BUILD_CONFIG_PATH
          echo "CONFIG_MODULE_SIG=y" >> $BUILD_CONFIG_PATH
          echo "CONFIG_MODULE_SIG_ALL=y" >> $BUILD_CONFIG_PATH
          echo "CONFIG_MODULE_SIG_SHA256=y" >> $BUILD_CONFIG_PATH
          echo "CONFIG_MODULE_SIG_KEY=\"signing_key.priv\"" >> $BUILD_CONFIG_PATH
          
          # KernelSU and SUSFS configuration (KSU setup script already adds CONFIG_KSU=y)
          echo "CONFIG_KSU_SUSFS=y" >> $BUILD_CONFIG_PATH
          
          echo "✅ Kernel signing and parameters configured."

      - name: Remove protected exports for compatibility
        run: |
          cd $KERNEL_REPO
          
          echo "Removing protected exports for Wi-Fi/Bluetooth compatibility..."
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' common/BUILD.bazel
          rm -f common/android/abi_gki_protected_exports_*
          
          # Clean up patch files
          rm -f common/50_add_susfs_in_gki-android14-6.1*.patch common/60_scope-minimized_manual_hooks.patch

      - name: Set Custom Kernel Version
        run: |
          cd $KERNEL_REPO
          
          echo 'echo "-kyernel"' > common/scripts/setlocalversion

      - name: Commit changes
        run: |
          cd $KERNEL_REPO/common
          
          git add -A
          git commit -m "Add KernelSU-Next with SUSFS integration and signing - $KERNEL_NAME"

      - name: Build Kernel with Bazel (Kleaf)
        id: build
        run: |
          cd $KERNEL_REPO
          mkdir -p ../android-kernel
          
          echo "Building kernel with Bazel..."
          tools/bazel run --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=../android-kernel
          
          echo "✅ Kernel build completed."
          echo "Contents of dist directory:"
          ls -la ../android-kernel

      - name: Verify signing
        run: |
          cd workarea/android-kernel
          
          echo "Verifying kernel module signatures..."
          # Check if modules are present and signed
          if ls *.ko 2>/dev/null; then
            for module in *.ko; do
              if file "$module" | grep -q "module signature appended"; then
                echo "✅ $module is signed"
              else
                echo "⚠️  $module is not signed"
              fi
            done
          else
            echo "No kernel modules found to verify"
          fi

      - name: Prepare kernel image
        run: |
          cd workarea/android-kernel
          
          echo "Built artifacts:"
          ls -la
          
          # Find and prepare kernel image
          if [[ -f "Image" ]]; then
            echo "Compressing Image to Image.lz4..."
            lz4 -9 -f Image Image.lz4
            KERNEL_IMAGE="Image.lz4"
          elif [[ -f "Image.gz" ]]; then
            echo "Converting Image.gz to Image.lz4..."
            gunzip Image.gz
            lz4 -9 -f Image Image.lz4
            KERNEL_IMAGE="Image.lz4"
          else
            echo "❌ No kernel image found!"
            exit 1
          fi
          
          echo "KERNEL_IMAGE=${KERNEL_IMAGE}" >> $GITHUB_ENV
          echo "✅ Kernel image prepared: $KERNEL_IMAGE"

      - name: Create release package
        run: |
          cd workarea/android-kernel
          
          # Create a comprehensive release package
          RELEASE_NAME="${KERNEL_NAME}-signed"
          mkdir -p "$RELEASE_NAME"
          
          # Copy all built artifacts
          cp * "$RELEASE_NAME/" 2>/dev/null || true
          
          # Create info file
          cat > "$RELEASE_NAME/build-info.txt" << EOF
          Kernel Build Information
          =======================
          Build Name: $KERNEL_NAME
          Build Date: $BUILD_DATE_FORMATTED
          Build Time: $BUILD_TIME_FORMATTED UTC
          Kernel Source: android14-6.1-lts
          Features: KernelSU-Next, SUSFS, Module Signing
          Builder: GitHub Actions
          
          Files:
          $(ls -la)
          EOF
          
          # Create ZIP package
          ZIP_NAME="${RELEASE_NAME}.zip"
          zip -r9 "$ZIP_NAME" "$RELEASE_NAME"
          
          echo "✅ Created: $ZIP_NAME"
          echo "Package size: $(du -h $ZIP_NAME | cut -f1)"
          echo "RELEASE_ZIP=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KERNEL_NAME }}-signed-kernel
          path: workarea/android-kernel/
          if-no-files-found: error

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.KERNEL_NAME }}-signed
          name: ${{ env.KERNEL_NAME }} (Signed)
          body: |
            ## 🚀 GKI LTS Build - ${{ env.KERNEL_NAME }}
            
            **Build Information:**
            - **Kernel Source**: android14-6.1-lts
            - **Build Date**: ${{ env.BUILD_DATE_FORMATTED }}
            - **Build Time**: ${{ env.BUILD_TIME_FORMATTED }} UTC
            - **Builder**: Bazel (Kleaf)
            
            **Security Features:**
            - 🔐 **Module Signing**: Kernel modules are cryptographically signed
            - 🛡️ **Verified Boot**: Enhanced security with signed modules
            
            **Root Features:**
            - ✅ **KernelSU-Next**: Latest with SUSFS integration
            - ✅ **SUSFS**: Advanced root hiding capabilities
            - 🔧 **Custom Build**: Optimized GKI LTS kernel
            
            **Installation:**
            1. Download the ZIP file below
            2. Extract and use the kernel image with your preferred method
            3. For AnyKernel3 flashing, use the Image.lz4 file
            
            **Note**: This kernel includes module signing for enhanced security and KernelSU-Next with SUSFS for advanced root management.
          files: |
            workarea/android-kernel/${{ env.RELEASE_ZIP }}
          draft: false
          prerelease: false

      - name: Generate build summary
        run: |
          cd workarea/android-kernel
          
          echo "## 🚀 GKI LTS Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Name**: \`$KERNEL_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: android14-6.1-lts" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: $BUILD_DATE_FORMATTED" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: $BUILD_TIME_FORMATTED UTC" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: \`$RELEASE_ZIP\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Size**: $(du -h $RELEASE_ZIP | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Build Components" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Builder**: Bazel (Kleaf)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 **Module Signing**: Enabled with RSA-2048" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **KernelSU-Next**: Latest with SUSFS integration" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **SUSFS**: Advanced root hiding capabilities" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Kernel Image**: \`$KERNEL_IMAGE\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Built Artifacts" >> $GITHUB_STEP_SUMMARY
          for file in *; do
            if [[ -f "$file" && "$file" != "*.zip" ]]; then
              echo "- \`$file\` ($(stat -c%s "$file" | numfmt --to=iec-i))" >> $GITHUB_STEP_SUMMARY
            fi
          done
