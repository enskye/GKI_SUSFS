name: Build Android GKI Kernel with KernelSU and SUSFS4KSU

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          bc \
          bison \
          flex \
          libssl-dev \
          libelf-dev \
          git \
          wget \
          curl \
          zip \
          unzip \
          python3 \
          python3-pip
          
    - name: Set up Python dependencies
      run: |
        pip3 install --user argparse
        
    - name: Download and setup toolchain
      run: |
        mkdir -p ~/toolchain
        cd ~/toolchain
        
        # Download Clang toolchain
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r487747c.tar.gz
        mkdir clang-r487747c
        tar -xzf clang-r487747c.tar.gz -C clang-r487747c
        
        # Download GCC toolchain for aarch64
        wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/heads/main.tar.gz -O gcc-aarch64.tar.gz
        mkdir gcc-aarch64
        tar -xzf gcc-aarch64.tar.gz -C gcc-aarch64
        
        # Download build tools
        wget https://android.googlesource.com/kernel/build-tools/+archive/refs/heads/main.tar.gz -O build-tools.tar.gz
        mkdir build-tools
        tar -xzf build-tools.tar.gz -C build-tools
        
    - name: Clone kernel source
      run: |
        cd ~/
        git clone --depth=1 --branch android-mainline https://android.googlesource.com/kernel/common kernel
        cd kernel
        git checkout android12-5.10-lts || git checkout android13-5.15-lts || git checkout origin/common-android-mainline
        
        # Switch to 6.1 LTS branch if available
        git fetch --all --tags
        git checkout android14-6.1 || echo "6.1 branch not found, using available branch"
        
    - name: Clone KernelSU
      run: |
        cd ~/kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
        
    - name: Clone SUSFS4KSU
      run: |
        cd ~/kernel
        git submodule add https://github.com/simonpunk/susfs4ksu.git KernelSU/userspace/susfs4ksu
        
    - name: Apply KernelSU patches
      run: |
        cd ~/kernel
        
        # Apply KernelSU patches
        if [ -d "KernelSU" ]; then
          echo "Applying KernelSU patches..."
          
          # Add KernelSU to Kconfig
          if ! grep -q "source \"KernelSU/Kconfig\"" "drivers/Kconfig"; then
            echo 'source "KernelSU/Kconfig"' >> drivers/Kconfig
          fi
          
          # Add KernelSU to Makefile
          if ! grep -q "obj-\$(CONFIG_KSU) += KernelSU/" "drivers/Makefile"; then
            echo 'obj-$(CONFIG_KSU) += KernelSU/' >> drivers/Makefile
          fi
        fi
        
    - name: Apply SUSFS4KSU patches
      run: |
        cd ~/kernel
        
        if [ -d "KernelSU/userspace/susfs4ksu" ]; then
          echo "Applying SUSFS4KSU patches..."
          
          # Copy SUSFS patches if they exist
          if [ -f "KernelSU/userspace/susfs4ksu/kernel_patches/susfs_for_ksu.patch" ]; then
            patch -p1 < KernelSU/userspace/susfs4ksu/kernel_patches/susfs_for_ksu.patch || echo "Patch failed, continuing..."
          fi
          
          # Manual integration if patch fails
          if [ -f "KernelSU/userspace/susfs4ksu/kernel_patches/fs/sus_su.c" ]; then
            mkdir -p fs/susfs
            cp -r KernelSU/userspace/susfs4ksu/kernel_patches/fs/* fs/
          fi
        fi
        
    - name: Configure kernel
      run: |
        cd ~/kernel
        export PATH=~/toolchain/clang-r487747c/bin:~/toolchain/gcc-aarch64/bin:~/toolchain/build-tools/path/linux-x86:$PATH
        export ARCH=arm64
        export SUBARCH=arm64
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=aarch64-linux-android-
        export CC=clang
        export LD=ld.lld
        
        # Use GKI defconfig
        make O=out gki_defconfig
        
        # Enable KernelSU
        echo "CONFIG_KSU=y" >> out/.config
        echo "CONFIG_KSU_DEBUG=y" >> out/.config
        
        # Enable SUSFS if available
        if [ -d "KernelSU/userspace/susfs4ksu" ]; then
          echo "CONFIG_SUSFS=y" >> out/.config
        fi
        
        # Regenerate config
        make O=out olddefconfig
        
    - name: Build kernel
      run: |
        cd ~/kernel
        export PATH=~/toolchain/clang-r487747c/bin:~/toolchain/gcc-aarch64/bin:~/toolchain/build-tools/path/linux-x86:$PATH
        export ARCH=arm64
        export SUBARCH=arm64
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=aarch64-linux-android-
        export CC=clang
        export LD=ld.lld
        
        # Build kernel
        make O=out -j$(nproc) 2>&1 | tee build.log
        
    - name: Prepare artifacts
      run: |
        cd ~/kernel
        mkdir -p ~/artifacts
        
        # Copy kernel image
        if [ -f "out/arch/arm64/boot/Image.gz" ]; then
          cp out/arch/arm64/boot/Image.gz ~/artifacts/
        elif [ -f "out/arch/arm64/boot/Image" ]; then
          cp out/arch/arm64/boot/Image ~/artifacts/
        fi
        
        # Copy kernel headers if needed
        if [ -f "out/arch/arm64/boot/dts/qcom/*.dtb" ]; then
          mkdir -p ~/artifacts/dtbs
          cp out/arch/arm64/boot/dts/qcom/*.dtb ~/artifacts/dtbs/
        fi
        
        # Copy build log
        cp build.log ~/artifacts/
        
        # Create info file
        cat > ~/artifacts/build-info.txt << EOF
        Build Date: $(date)
        Kernel Version: $(cat out/include/generated/utsrelease.h | cut -d'"' -f2)
        KernelSU: $(if [ -d "KernelSU" ]; then echo "Yes"; else echo "No"; fi)
        SUSFS4KSU: $(if [ -d "KernelSU/userspace/susfs4ksu" ]; then echo "Yes"; else echo "No"; fi)
        Compiler: $(~/toolchain/clang-r487747c/bin/clang --version | head -n1)
        EOF
        
    - name: Upload kernel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gki-kernel-kernelsu-susfs
        path: ~/artifacts/
        retention-days: 30
        
    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-failed
        path: |
          ~/kernel/build.log
          ~/kernel/out/.config
        retention-days: 7

    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ~/artifacts/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
