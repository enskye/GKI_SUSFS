name: Build GKI Kernel

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Install Dependencies & Setup Tools
      run: |
        # Add Bazel's apt repository
        sudo apt-get update
        sudo apt-get install -y apt-transport-https curl gnupg
        curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
        sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
        echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        
        # Install all dependencies
        sudo apt-get update
        sudo apt-get install -y git curl rsync bazel
        
        # Setup 'repo' tool
        mkdir -p ~/.bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
        chmod a+x ~/.bin/repo
        echo "$HOME/.bin" >> $GITHUB_PATH

   # - name: Download Manifest File
     # run: |
      #  curl -LSs manifest_13884750.xml https://raw.githubusercontent.com/enskye/kernel_patches/main/manifest_13884750.xml

    - name: Clone Repositories
      run: |
        git clone https://gitlab.com/pershoot/susfs4ksu.git -b gki-android14-6.1-dev
        git clone https://github.com/enskye/kernel_patches.git -b main
        
    - name: Create Directories
      run: |
        mkdir gki-kernel android-kernel

    - name: Pull Down GKI Repository
      working-directory: ./gki-kernel
      run: |
        repo init -u https://android.googlesource.com/kernel/manifest
        cp ../kernel_patches/manifest_13884750.xml .repo/manifests/
        repo init --depth=1 -m manifest_13884750.xml
        repo --trace sync -j$(nproc --all)

    - name: Copy Patches
      working-directory: ./gki-kernel
      run: |
        cp -p ../susfs4ksu/kernel_patches/fs/* common/fs
        cp -p ../susfs4ksu/kernel_patches/include/linux/* common/include/linux
        cp -p ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch common
        cp -p ../susfs4ksu/kernel_patches/60_scope-minimized_manual_hooks.patch common

    - name: Apply Patches
      working-directory: ./gki-kernel/common
      run: |
        patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch
        patch -p1 < 60_scope-minimized_manual_hooks.patch

    - name: Integrate KernelSU-Next
      working-directory: ./gki-kernel
      run: |
        curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/refs/heads/next-susfs/kernel/setup.sh" | bash -s next-susfs

    - name: Clean Up Patches and Exports
      working-directory: ./gki-kernel
      run: |
        sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' common/BUILD.bazel
        rm common/android/abi_gki_protected_exports_* common/50_add_susfs_in_gki-android14-6.1.patch common/60_scope-minimized_manual_hooks.patch
        
    - name: Rename kernel
      run: |
        cd gki-kernel
        echo 'echo "-kyernel"' > ./common/scripts/setlocalversion
        sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || echo "No stamp.bzl!" 
        sed -i 's/-dirty//' ./common/scripts/setlocalversion 
        sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || echo "No workspace_status_stamp.py!"
        
    - name: Build the Kernel
      run: |
        cd gki-kernel
        tools/bazel run --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=../android-kernel
        
    - name: Package into AnyKernel3 zip
      run: |
        # Clone the AnyKernel3 repository
        git clone https://github.com/osm0sis/AnyKernel3.git AnyKernel3

        # Copy our built kernel image from the 'android-kernel' directory
        cp android-kernel/Image.lz4 AnyKernel3/

        # Set kernel information in anykernel.sh (optional but recommended)
        cd AnyKernel3
        ZIP_NAME="kyernel-gki-$(date +%Y%m%d-%H%M)"
        sed -i "s/kernel.string=.*/kernel.string=$ZIP_NAME by enskye/" anykernel.sh

        # Create the zip package
        zip -r9 "${ZIP_NAME}.zip" * -x .git README.md *placeholder
        
        # Create a directory for the final upload and move the zip there
        cd ..
        mkdir -p release
        mv AnyKernel3/*.zip release/

    - name: Upload Flashable Kernel Zip
      uses: actions/upload-artifact@v4
      with:
        name: kyernel-flashable
        path: release/kyernel-gki-*.zip
        
    #- name: Upload Kernel Artifact
      #uses: actions/upload-artifact@v4
      #with:
        #name: kernel-image
        #path: android-kernel/
